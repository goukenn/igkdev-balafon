<?php

// @author: C.A.D. BONDJE DOUE
// @filename: installer-helper.pinc
// @date: 20221207 19:26:53
// @desc: installer helper



if (!function_exists("igk_getr")) {
    function igk_getr($n, $default = null)
    {
        if (isset($_REQUEST[$n])) {
            return $_REQUEST[$n];
        }
        return $default;
    }
}
if (!function_exists("igk_count")) {
    function igk_count($n)
    {
        return count($n);
    }
}
if (!function_exists("igk_io_dir")) {
    function igk_dir($dir, $separator = DIRECTORY_SEPARATOR)
    {
        if ($dir === null) {
            return $dir;
        }
        $d = $separator;
        $out = IGK_STR_EMPTY;
        if (ord($d) == 92) {
            $out = preg_replace("/\//", '\\', $dir);
            $out = str_replace("\\", "\\", $out);
        } else {
            $d = "/[\\\\]/";
            $out = preg_replace($d, '/', $dir);
            $out = str_replace("//", "/", $out);
        }
        return $out;
    }
}
if (!function_exists("igk_io_rmdir")) {
    function igk_io_rmdir($dir, $recursive = true, $callback = null)
    {
        if (!is_dir($dir))
            return false;
        $pdir = array($dir);
        $kdir = array($dir);
        $d = 1;
        while ($dir = array_pop($pdir)) {
            $hdir = opendir($dir);
            if (!$hdir)
                return false;
            while (($f = readdir($hdir))) {
                if (($f == ".") || ($f == ".."))
                    continue;
                $v = igk_dir($dir . "/" . $f);

                if ($callback && !$callback($v)) {
                    continue;
                }
                if (is_link($v)) {
                    @unlink($v);
                    continue;
                }
                if (is_dir($v)) {
                    if ($recursive) {
                        array_push($pdir, $v);
                        array_push($kdir, $v);
                    } else {
                        $d = 0;
                        break;
                    }
                } else if (is_file($v) || is_link($v)) {
                    if ($recursive)
                        unlink($v);
                    else {
                        $d = 0;
                        break;
                    }
                }
            }
            closedir($hdir);
        }
        while ($d && ($dir = array_pop($kdir))) {
            if (is_link($dir)) {
                unlink($dir);
            } else {
                @rmdir($dir);
            }
        }
        return igk_count($kdir) == 0;
    }
}
class InstallerHelper
{
    public static function GetFiles(string $dir, $pattern)
    {
        $out = null;
        if ($hdir = opendir($dir)) {
            while ($m = readdir($hdir)) {
                if (preg_match($pattern, $m)) {
                    if (is_null($out)) $out = [];
                    $out[] = $m;
                }
            }
            closedir($hdir);
        }
        return $out;
    }
}
class InstallerResponse
{
    var $code;
    /**
     * installer response header
     * @var array
     */
    var $header = [];
    public function __construct()
    {
        $this->code = 200;
    }
    public function setHeader()
    {
        $reponses = [
            "200" => "HTTP/1.0 200 OK",
            "404" => "HTTP/1.0 404 Not Found",
            "500" => "HTTP/1.0 500 Server misconfiguration",
            "503" => "HTTP/1.0 500 Installer Directory is link",
        ];
        $msg = $reponses[$this->code];
        header($msg);
        foreach ($this->header as $k) {
            header($k);
        }
    }
    public function die(string $msg, $code = 200)
    {
        $this->code = $code;
        $this->setHeader();
        die($msg);
    }
    public function response($data, $contentType = "text/html")
    {
        $this->header[] = "Content-Type: " . $contentType;
        $this->code = 200;
        $this->setHeader();
        echo $data;
        exit;
    }
}

