<?php

use IGK\ApplicationFactory;
use IGK\ApplicationLoader;
use IGK\Helper\IO;

ini_set('display_errors', 1);
error_reporting(-1);

if (!function_exists("igk_getr")) {
    function igk_getr($n, $default = null)
    {
        if (isset($_REQUEST[$n])) {
            return $_REQUEST[$n];
        }
        return $default;
    }
}

if (!function_exists("igk_install_site")) {
    function igk_install_site($corelib, $entryfile, $args, $exit = true, $production = true)
    {
        global $argv, $argc;
        $argv = $args;
        $argc = count($argv);
        $_SERVER["argv"] = $argv;
        $_SERVER["argc"] = $argc;
        unset($_SERVER["REQUEST_URI"]);

        if (!file_exists($corelib)){
            error_log('missing core file', $corelib);
            return false;
        }

        require_once($corelib);
        require_once(IGK_LIB_CLASSES_DIR . "/interfaces.php");
        require_once(IGK_LIB_CLASSES_DIR . "/IGKObject.php");
        require_once(IGK_LIB_CLASSES_DIR . "/IGKApplicationBase.php");
        require_once(IGK_LIB_CLASSES_DIR . "/Resources/R.php");
        require_once(IGK_LIB_CLASSES_DIR . "/System/Console/App.php");
        require_once(IGK_LIB_CLASSES_DIR . "/System/Console/BalafonApplication.php");
        require_once(IGK_LIB_CLASSES_DIR . "/System/Console/Logger.php");
        require_once(IGK_LIB_CLASSES_DIR . "/System/Console/ConsoleLogger.php");
        require_once(IGK_LIB_CLASSES_DIR . "/ApplicationFactory.php");
        require_once(IGK_LIB_CLASSES_DIR . "/IGKEnvironmentConstants.php");
        require_once(IGK_LIB_CLASSES_DIR . "/IGKEnvironment.php");
        require_once(IGK_LIB_CLASSES_DIR . "/Server.php");
        // loader
        require_once(IGK_LIB_CLASSES_DIR . "/ApplicationLoader.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/conf.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/environment.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/engine.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/reflection.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/debug.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/sys.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/io.php");
        require_once(IGK_LIB_DIR . "/Lib/functions-helpers/php.php");
        require_once(IGK_LIB_DIR . "/igk_functions.php");

        ignore_user_abort(false);
        $_SERVER["HTTP_USER_AGENT"] = "balafon - CLI";
        $_SERVER["REMOTE_ADDR"] = "0.0.0.0";
        // + | ---------------------------------------------------------------------------------- 
        // + | register application type
        // + |
        ApplicationFactory::Register("balafon", \IGK\System\Console\BalafonApplication::class);

        /**
         * @var \IGK\System\Console\BalafonApplication $app 
         */
        $app = ApplicationLoader::Boot("balafon");

        $command = $app->getPrimaryCommand();

        //-----------------------------------------------------------------------------
        // + | handle default
        // + |
        if (isset($argv[1]) && $argv[1] == "--init") {
            //-------------------------------------------------------------------------
            // | initialize balafon configuration 
            // |
            $fc = $command["--init"][0];
            $carg = [];
            if (in_array("--noconfig", $argv)) {
                $carg["--noconfig"] = 1;
            }
            if (in_array("--force", $argv)) {
                $carg["--force"] = 1;
            }
            if (in_array("--primary", $argv)) {
                $carg["--primary"] = 1;
            }
            $command["options"] = (object)$carg;
            $command["argv"] = $argv;
            $fc([], $command);
            exit(0);
        }
        if (in_array("--debug", $argv)) {
            $fc = $command["--debug"][0];
            $fc([], $command);
        }
        // + | --------------------------------------------------------------------------------
        // + | Run the application
        // + |
        $app->command = $command;
        $app->environment = igk_environment()->name();
        $status = $app->run($entryfile, false);
        //--------------------------------------------------------------------------------
        // | finish with status code
        // |
        if ($exit)
            exit($status);
    }
}

//#{{@Inc(class.InstallerResponse.pinc)}}


$response = new InstallerResponse();

if (!version_compare(PHP_VERSION, "7.3", ">=")) {
    $response->die("mandory version required. 7.3<=" . PHP_VERSION);
}
if (!isset($_SERVER["REQUEST_METHOD"]) || ($_SERVER["REQUEST_METHOD"] != "POST")) {
    $response->die("request method not match", 500);
}

$production = isset($_SERVER["ENVIRONMENT"]) ? $_SERVER["ENVIRONMENT"] == 'production' : false;
$home = isset($_SERVER["HOME"]) ? $_SERVER["HOME"] : igk_getr("home_dir", "/");
$corelib = igk_getr('corelib'); // library relative to home 
$app_dir = igk_getr('app_dir'); // application dir relative to %home
$root_dir = igk_getr('root_dir'); // public dir relative to %home
$site_dir = igk_getr('site_dir');
$base_uri = igk_getr('base_uri', isset($_SERVER["HTTP_HOST"]) ? $_SERVER["HTTP_HOST"] : "localhost");
$token = igk_getr('token');
$no_subdomain = igk_getr('no_subdomain');
$no_webconfig = igk_getr('no_webconfig');
$install_dir = implode("/", [$home, ltrim($corelib, '/')]);
$app_dir = implode("/", [$home, ltrim($app_dir, '/')]);
$root_dir = implode("/", [$home, ltrim($root_dir, '/')]);
$site_dir = implode("/", [$home, ltrim($site_dir, '/')]);

 

$_ISUNIX = in_array(strtolower(PHP_OS), ['linux', 'darwin']);
// + | make symbolic link
if (!is_link($link = $app_dir . "/Lib/igk")) {
    @symlink($install_dir, $link);
}
$v_blf_cmd = "{$install_dir}/bin/balafon";



if (file_exists($v_blf_cmd)) {
    @chmod($v_blf_cmd, 0775);

    // + | install with balafon command
    $bck = getcwd();
    if (is_dir($site_dir))
        chdir($site_dir);
    $v_args = implode(' ', array_filter([
        $no_subdomain ? "--no-subdomain" : null,
        $no_webconfig ? "--no-webconfig" : null,
    ]));

    $dv = null; //$_ISUNIX ? " > /dev/null" : "";
    $cmd = "{$v_blf_cmd} --install-site --root-dir:{$root_dir} --application:{$app_dir} {$v_args}{$dv}";
    $result = `$cmd`;

    if (is_null($result) || strstr($result, 'Status: 500 Internal Server Error')) {

        ob_start();
        $root_dir = substr($root_dir, strlen($site_dir) + 1);
        // $app_dir = substr($app_dir, strlen($site_dir)+1);

        $g = igk_install_site(
            $app_dir . "/Lib/igk/igk_framework.php",
            __FILE__,
            array_merge(
                [
                    "balafon-shell",
                    "--install-site",
                    "--root-dir:{$root_dir}",
                    "--application:{$app_dir}",
                    "--uri:{$base_uri}",
                ],
                explode(" ", $v_args)
            ),
            false,
            $production
        );
        IO::RmDir($site_dir . "./Caches");
        $content = ob_get_contents();
        $result = ["type" => "core install", "response" => $g];
        ob_end_clean();
    }
    chdir($bck);
}
if ($admin_login = igk_getr("admin_login")) {
    if ($admin_pwd = igk_getr("admin_pwd")) {
        $admin_pwd = md5($admin_pwd);
    }
    if (is_file($file = $app_dir . "/Data/configs.php")) {
        if ($configs = include($file)) {
            $configs['admin_login'] = $admin_login;
            $configs['admin_pwd'] = $admin_pwd;
            igk_io_w2file($file, implode("\n", ["<?php", "return " . var_export($configs, true) . ";"]));
        }
    }
}

// + | unlink script 
@unlink(__FILE__);

function_exists('opcache_reset') && @opcache_reset();
error_clear_last();

$response->response(json_encode((object)[
    "message" => "finish",
    "app_dir" => $app_dir,
    "corelib" => $corelib,
    "home" => $home,
    "cmd" => $cmd,
    "install_result" => $result,
], JSON_UNESCAPED_SLASHES), "application/json");
