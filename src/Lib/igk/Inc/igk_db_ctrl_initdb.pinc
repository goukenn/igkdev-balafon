<?php
// @file : igk_db_ctrl_initdb
// @author: C.A.D. BONDJE DOUE
// @desc: 
use IGK\System\Console\Logger;

if(!$force && !$controller->getCanInitDb()){
    igk_debug_wln("Can't init db ".$controller->Name. " ConfigUserConnected: ".igk_parsebool(igk_is_conf_connected()));
    return;
}
$response = false;
$fcname = "initDb";
igk_set_env("sys://db/constraint_key", $controller->getInitDbConstraintKey());
// Logger::print("init db: ".get_class($controller));
if(!$controller->getUseDataSchema()){ 
    Logger::info("init from db function ...");
    $controller::initDbFromFunctions();
    $response = true;
}
else{
    Logger::info("init from db schemas ...");
    $bck=igk_get_env(IGK_ENV_DB_INIT_CTRL);
    igk_set_env(IGK_ENV_DB_INIT_CTRL, $controller);
    $controller->initDbFromSchemas();
    $controller->initDbConstantFiles();
    $controller::InitDataBaseModel($force);
    if (($cl = $controller::resolvClass(Database\InitData::class)) && class_exists($cl, false)){ 
        $call = true;
        // + | Check Init 
        $c = new ReflectionMethod($cl, "Init");
        if ($type = $c->getParameters()[0]->getType()){
            $call = IGKType::GetName($type)==get_class($controller);
        }
        $call && $cl::Init($controller);
    } 
    igk_set_env(IGK_ENV_DB_INIT_CTRL, $bck);
}
igk_set_env(get_class($controller)."::initdb", 1); 

if(igk_uri_is_match(igk_io_currentUri(), $controller->getAppUri($fcname))){
 
    igk_is_debug() && igk_ilog("notify message :  IGK_HOOK_DB_CHANGED");
    igk_hook(IGK_HOOK_DB_CHANGED, $controller, null);
    igk_navto($controller->getAppUri());
}

return $response;