<?php
// @author: C.A.D. BONDJE DOUE
// @filename: igk_db_ctrl_resetdb.pinc
// @date: 20220803 13:51:47
// @desc: reset database script


use IGK\System\Console\Logger;
use IGK\Controllers\BaseController;

// + | --------------------------------------------------------------------
// + | RESET DATABASE
// + |



/**
 * @var BaseController $controller 
 */
$funcName = "resetDb";
$s_d= igk_app_is_uri_demand($controller, $funcName);
$s = $force || igk_is_conf_connected() || $controller::IsUserAllowedTo($controller->getName().":".$funcName);
if(!$s_d){
    if(!$s){
        igk_notifyctrl()->addError("Operation not allowed");        
        if ($navigate){
            igk_navto($controller->getAppUri());
        }       
        return -1;
    } 
} 
if(!$s){
    if($s_d && $navigate){
        igk_navto($controller->getAppUri());
    }
    Logger::danger("failed to resetdb");
    return -2;
}  
$deflog = igk_environment()->get(__FILE__);

if ($deflog===null){
Logger::print("db-name: ".igk_configs()->db_name);
Logger::print("db-server: ".igk_configs()->db_server);
Logger::print("dropdb ... ". ($force ? "force" : ""));
igk_environment()->set(__FILE__, 1);
}else{
    $deflog++;
}
$controller::dropDb(false, $force); 
$ad=igk_get_data_adapter($controller);
$ad->initForInitDb();
igk_set_env("sys://db_init_table/ctrl", $controller);
Logger::print("initdb");
$controller::initDb($force);

$ad->flushForInitDb();
igk_hook(IGKEvents::HOOK_DB_INIT_ENTRIES, array($controller));
igk_hook(IGKEvents::HOOK_DB_INIT_COMPLETE, ["controller"=>$controller]);

if ($deflog>0){
    $deflog--;
}
 
if ($navigate){
    $controller::logout(0);
} 
if($force || igk_uri_is_match(igk_io_currentUri(), $controller->getAppUri($funcName))){
    igk_hook(IGK_HOOK_DB_CHANGED, $controller, null);
    if($navigate){
        igk_navto($controller->getAppUri());
    }
    return true;
}
else{
    igk_wln_e("resetDb : no matching uri "
    , "appuri : ".$controller->getAppUri($funcName)
    , "currenturi: ".igk_io_currentUri()); 
}
return 0;