<?php
// @file : DefaultModelEntryExtensions.pinc
use IGK\Database\DbQueryResult;
use IGK\Helper\MacrosHelper;
use IGK\Models\Authorizations;
use IGK\Models\Groupauthorizations;
use IGK\Models\Groups;
use IGK\Models\Usergroups;
use IGK\Models\Users;
use IGK\System\Database\QueryBuilder; 

if (defined("IGK_FRAMEWORK_ATOMIC")){
    return;
}

require_once IGK_LIB_CLASSES_DIR."/Helper/MacrosHelper.php";

// + | register user get user groups 
Usergroups::registerMacro("getUserGroups", function(int $uid){   
    $c = $this::select_query(["clUser_Id"=>$uid],[
        "OrderBy" => ["clName|ASC"],
        "Joins"=>
        [
            [ Groups::table() =>QueryBuilder::LeftJoin(Groups::column("clId")." = clGroup_Id")]
        ]
    ]);  

    
    return $c ? $c->getRows() : null;
});

// + | register user authorisation checking
Groupauthorizations::registerMacro("getUserAuths", function(int $uid){     
    $auth_table = Authorizations::table();
    $group_table = Groups::table();
    $user_group_table = UserGroups::table();
    $table = $this->getTable();
    $tab = [];
    $not_grant = [];
    $c = $this::select_query(["clUser_Id"=>$uid],[
        "Distinct"=>1,
        "Columns"=>[
            $auth_table.".clId as auth_id",
            $auth_table.".clName as auth_name",
            $group_table.".clName as group_name",
            "clGrant"
        ],
        "Joins"=>
        [
            [ UserGroups::table() =>QueryBuilder::InnerJoin($table.".clGroup_Id = ".$user_group_table.".clGroup_Id")],
            [ Authorizations::table() =>QueryBuilder::LeftJoin(Authorizations::table().".clId = clAuth_Id")],
            [ Groups::table() =>QueryBuilder::LeftJoin(Groups::table().".clId = ".UserGroups::table().".clGroup_Id")],
        ], "OrderBy"=>["auth_name|Asc"],
        DbQueryResult::CALLBACK_OPTS=>function($row) use (& $tab, & $not_grant){
            //+ | filter granted only auth
            //--------------------------------------------------------------------
            if (in_array($row->auth_name, $not_grant)){
                return false;
            }
            if (!$row->clGrant){
                $not_grant[] = $row->auth_name;
                unset($tab[$row->auth_name]);
            } else {
                $tab[$row->auth_name] = $row;  
            }
            return false;
        }
    ]);  
    return $tab; 

});

// + | check auth
Users::registerMacro("auth", MacrosHelper::auth());

//+ | get current user helper 
Users::registerMacro("currentUser", MacrosHelper::currentUser());

//+ | add user 
// Users::registerMacro("addUser", [MacrosHelper::class, "addUser"]);
Users::registerMacro("addUser", MacrosHelper::addUser2());

Users::registerMacro("GetUserByLogin", function($login){
$conditions = [];
if (!IGKValidator::IsEmail($login)) {
    $conditions[] = (object)["operand" => "OR", "conditions" => ["clLogin" => $login, "clLogin" => $login . "@" . igk_app()->Configs->website_domain]];
} else {
    $conditions["clLogin"] = $login;
}
return \IGK\Models\Users::select_row($conditions);
});

/**
 * @package \IGK\Models\Users;
 * @method static void addUser add user
 */