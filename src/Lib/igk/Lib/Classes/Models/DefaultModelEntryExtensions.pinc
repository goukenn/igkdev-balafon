<?php
// @author: C.A.D. BONDJE DOUE
// @filename: DefaultModelEntryExtensions.pinc
// @date: 20220429 09:21:55
// @file : DefaultModelEntryExtensions.pinc

use IGK\Database\DbQueryResult;
use IGK\Helper\MacrosHelper;
use IGK\Helper\StringUtility;
use IGK\Models\Authorizations;
use IGK\Models\Groupauthorizations;
use IGK\Models\Groups;
use IGK\Models\Usergroups;
use IGK\Models\Users;
use IGK\System\Database\QueryBuilder; 


require_once IGK_LIB_CLASSES_DIR."/Helper/MacrosHelper.php";

// + | register user get user groups 
Usergroups::registerMacro("getUserGroups", function(int $uid){   
    $c = $this::select_query(["clUser_Id"=>$uid],[
        "OrderBy" => ["clName|ASC"],
        "Joins"=>
        [
            [ Groups::table() =>QueryBuilder::LeftJoin(Groups::column("clId")." = clGroup_Id")]
        ]
    ]);  
    return $c ? $c->getRows() : null;
});

// + | register user authorisation checking
Groupauthorizations::registerMacro("getUserAuths", function(int $uid){     
    $auth_table = Authorizations::table();
    $group_table = Groups::table();
    $user_group_table = UserGroups::table();
    $table = $this->getTable();
    $tab = [];
    $not_grant = [];
    $c = $this::select_query(["clUser_Id"=>$uid],[
        "Distinct"=>1,
        "Columns"=>[
            $auth_table.".clId as auth_id",
            $auth_table.".clName as auth_name",
            $group_table.".clName as group_name",
            "clGrant"
        ],
        "Joins"=>
        [
            [ UserGroups::table() =>QueryBuilder::InnerJoin($table.".clGroup_Id = ".$user_group_table.".clGroup_Id")],
            [ Authorizations::table() =>QueryBuilder::LeftJoin(Authorizations::table().".clId = clAuth_Id")],
            [ Groups::table() =>QueryBuilder::LeftJoin(Groups::table().".clId = ".UserGroups::table().".clGroup_Id")],
        ], "OrderBy"=>["auth_name|Asc"],
        DbQueryResult::CALLBACK_OPTS=>function($row) use (& $tab, & $not_grant){
            //+ | filter granted only auth
            //--------------------------------------------------------------------
            if (in_array($row->auth_name, $not_grant)){
                return false;
            }
            if (!$row->clGrant){
                $not_grant[] = $row->auth_name;
                unset($tab[$row->auth_name]);
            } else {
                $tab[$row->auth_name] = $row;  
            }
            return false;
        }
    ]);  
    return $tab; 

}); 

Users::registerMacro("groups", function($user=null){    
    return Usergroups::getUserGroups($this->clId);
});

// + | check auth
Users::registerMacro("auth", MacrosHelper::auth());

//+ | get current user helper 
Users::registerMacro("currentUser", MacrosHelper::currentUser());


// --------------------------------------------------------------
// get current users auths 
// --------------------------------------------------------------
Users::registerMacro("auths", function(){
    $joint = [
        Authorizations::table()=>[Authorizations::column("clId")."=".Groupauthorizations::column("clAuth_Id")],
        //Groupauthorizations::table()=>[Groupauthorizations::column("clGroup_Id")."=".Authorizations::column(("clId"))],
        UserGroups::table()=>[UserGroups::table("clUser_Id")."=".$this->clId]
    ];
    // igk_html_pre($joint);
    // igk_wln_e($joint);
    $g = Groupauthorizations::prepare()
    ->join($joint)
    ->distinct(true)
    ->where([
        'clGrant'=>1
    ])
    ->columns([Authorizations::column("clName")=>"name",
    Authorizations::column("clController")=>"controller"])
    ->orderBy(["name"])
    ->execute();
    if ($g){
        return $g->to_array();
    } 
});

//+ | add user 
// Users::registerMacro("addUser", [MacrosHelper::class, "addUser"]);
Users::registerMacro("addUser", MacrosHelper::addUser2());
//+ |  get user by login
Users::registerMacro("GetUserByLogin", function($login){
$conditions = [];
if (!IGKValidator::IsEmail($login)) {
    $conditions[] = (object)["operand" => "OR", "conditions" => ["clLogin" => $login, "clLogin" => $login . "@" . igk_configs()->website_domain]];
} else {
    $conditions["clLogin"] = $login;
}
return \IGK\Models\Users::select_row($conditions);
});

Users::registerMacro("grantAuthorization", function($group, $auth, $grant=1){
    $result = false;
    $this->beginTransaction();
    $gr = Groups::select_row(["clName"=>$group]);    
    if (!$gr && ! ($gr = Groups::insertIfNotExists(["clName"=>$group]))){
        igk_die("failed to add group");
    }
    if ($gr->grantAuthorization($auth, $grant)){
        // Logger::success("grant authorization to group");
        if (Usergroups::insertIfNotExists([
            "clUser_Id"=>$this->clId,
            "clGroup_Id"=>$gr->clId
        ])){
            $result = true;
        }
    }
    if ($result){
        $this->commit();
    }else {
        $this->rollback();
    }
    return $result;
});

Groups::registerMacro("grantAuthorization", function(string $auth, $grant=1){
   // Logger::print("Grant : ".$auth ." to ". $group);
  

    $auths = Authorizations::select_row(["clName"=>$auth]);
    if (!$auths && !($auths = Authorizations::insertIfNotExists(["clName"=>$auth]))){
        igk_die("failed to add auth");        
    }
    return Groupauthorizations::insertIfNotExists(
        ["clGroup_Id"=>$this->clId, "clAuth_Id"=>$auths->clId],
        ["extra"=>["clGrant"=>$grant]]);

});


Users::registerExtension(\IGK\Models\Macros\UsersMacros::class);
 

\IGK\Models\DbLogs::registerMacro("add", function(string $msg, ?string $tag=null){ 
    // + | because database can failed
    static $logger;
    if (!$logger){
        $logger = 1;
        $data = ["db_logs_msg" => $msg];
        if ($tag)
            $data["db_logs_tags"] = $tag;
        $logger = null;
        //return $r;
    }
    return false;
});

\IGK\Models\Users::registerMacro("fullname", function(){
    return StringUtility::NameDisplay($this->clFirstName, $this->clLastName);
});


\IGK\Models\Usergroups::registerMacro("getUserGroup", function(){
    return igk_db_user_groups($this->clUser_Id);
});

\IGK\Models\ReferenceModels::registerExtension(\IGK\Models\Macros\ReferenceModelsMacros::class);