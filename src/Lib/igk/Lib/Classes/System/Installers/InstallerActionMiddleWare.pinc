<?php
// @file: installerMiddleware.pinc
// @author: C.A.D. BONDJE DOUE
// @description: list of installer middelware 
// @copyright: igkdev Â© 2020
// @license: Microsoft MIT License. For more information read license.txt
// @company: IGKDEV
// @mail: bondje.doue@igkdev.com
// @url: https://www.igkdev.com
namespace IGK\System\Installers;

use Exception;
use IGK\Helper\IO;
use IGK\Helper\MaintenanceHelper;
use IGK\System\Html\HtmlReader;
use SuccessMiddleWare as GlobalSuccessMiddleWare;

use function igk_resources_gets as __;

///<summary>Represente class: BalaffonInstallerMiddelWare</summary>
/**
* Represente BalaffonInstallerMiddelWare class
*/
class BalafonInstallerMiddelWare extends InstallerActionMiddleWare{
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return "start installer";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        $service=$this->getService();
        try {
            $this->next();
        }
        catch(Exception $ex){
            $this->getService()->Success=false;
        }
        if($this->getService()->Success){
            $service->Listener->write(__("Success"));
        }
        else{
            $this->abort();
        }
    }
}
///<summary>Represente class: ClearCacheMiddleWare</summary>
/**
* Represente ClearCacheMiddleWare class
*/
class ClearCacheMiddleWare extends InstallerActionMiddleWare{
  
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return __("Clear cache ...");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        if(is_dir($cachedir=$this->getService()->CacheDir)){
            IO::RmDir($cachedir);
        }
        $this->next();
    }
}
///<summary>Represente class: ErrorHandleMiddleWare</summary>
/**
* Represente ErrorHandleMiddleWare class
*/
class ErrorHandleMiddleWare extends InstallerActionMiddleWare{
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        try {
            $this->next();
        }
        catch(Exception $ex){
            $this->getService()->Success=0;
        }
    }
}
///<summary>Represente class: ExtractLibaryMiddleWare</summary>
/**
* Represente ExtractLibaryMiddleWare class
*/
class ExtractLibaryMiddleWare extends InstallerActionMiddleWare{
    ///<summary></summary>
    /**
    * 
    */
    public function abort(){
        $lib=$this->getService()->LibDir;
        if(is_dir($lib)){
            IO::RmDir($lib);
        }
        parent::abort();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return __("Extract Core Library");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        if(!file_exists($zip=$this->getService()->CoreZip)){
            return;
		}
        $s=igk_zip_unzip_filecontent($zip, "manifest.xml");
        if(empty($s))
            return;
        $xml=HtmlReader::Load($s, "xml");
        $obj=igk_createobj();
        igk_conf_load($obj, $xml);
        $manifest=igk_conf_get($obj, "manifest");
        if(igk_conf_get($manifest, "appName") != IGK_PLATEFORM_NAME){
            return;}
        $version=igk_conf_get($manifest, "version");
        $lib=$this->getService()->LibDir;
        IO::CreateDir($lib);
        if(!igk_zip_unzip(igk_html_uri($zip), $lib."/../../", "#^Lib/igk#")){
            return;
        }
        $this->next();
    }
}
///<summary>Represente class: FailedMiddleWare</summary>
/**
* Represente FailedMiddleWare class
*/
class FailedMiddleWare extends InstallerActionMiddleWare{
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        $this->getService()->Success=1;
    }
}
///<summary>Represente class: InstallerEventMessageMiddleWare</summary>
/**
* Represente InstallerEventMessageMiddleWare class
*/
class InstallerEventMessageMiddleWare extends InstallerActionMiddleWare{
    var $host;
    ///<summary></summary>
    ///<param name="host"></param>
    /**
    * 
    * @param mixed $host
    */
    public function __construct($host){
        $this->host=$host;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function abort(){
        $msg=$this->host->getMessage();
        igk_flush_write("aborting ... ". $msg);
        igk_flush_data();
        parent::abort();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        $msg=$this->host->getMessage();
        igk_flush_write($msg);
        igk_flush_data();
        $this->next();
    }
}
///<summary>Represente class: MaintenaceLibMiddleWare</summary>
/**
* Represente MaintenaceLibMiddleWare class
*/
class MaintenaceLibMiddleWare extends InstallerActionMiddleWare{
    ///<summary></summary>
    /**
    * 
    */
    private function __unlock(){
        if (is_dir($bdir=$this->getService()->BaseDir)){
            MaintenanceHelper::UnlockSite($bdir);       
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function abort(){
        $this->__unlock();
        parent::abort();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return __("put site on 'maintenance mode'");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        $bdir=$this->getService()->BaseDir;
        \IGK\Helper\MaintenanceHelper::LockSite($bdir);       
        $this->next();
        if($this->getService()->Success){
            $this->getService()->Listener->write("unlock 'maintenance mode'");
            $this->__unlock();
        }
    }
}
///<summary>Represente class: RenameLibaryMiddleWare</summary>
/**
* Represente RenameLibaryMiddleWare class
*/
class RenameLibaryMiddleWare extends InstallerActionMiddleWare{
    private function getTempDir(){
        return dirname($this->getService()->LibDir)."/__tempigk";        
    }
    ///<summary></summary>
    /**
    * restaure tempory directory
    */
    public function abort(){
        $libdir= $this->getTempDir();
        if(is_dir($libdir) ){
            $g = dirname($libdir)."/igk";
            if (!is_dir($g)){
                rename($libdir, $g); 
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return "rename library";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke(){
        $libdir=$this->getService()->LibDir;
        if(is_dir($libdir)){
            $g =  dirname($libdir)."/__temp".basename($libdir);
            if (is_dir($g)){
                IO::RmDir($g);
            }
            rename($libdir,$g);
        }
        $this->next();
    }
}


